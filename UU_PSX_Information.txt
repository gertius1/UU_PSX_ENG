This doc collects all information found out about the UU PSX ROM


TOC
===============
1. 		Memory Maps
1.1. 	SLPS_007.423
1.2. 	AVATAR
2.		ROM extension
3. 		String processing
3.1. 	General strings
3.1. 	NPC strings









=================
= Contents		=
=================

1. Memory Maps
=============================
The memory maps contain all discovered points of interest in the ROM. All information relates to original version, and not modified one. Addresses relative to file, not to ISO.

1.1. Memory Map SLPS_007.42
=============================

0x11290 				Character creation screen menu bottom right, changed to SPC DEL END.
						The character hexcode is the first hex nr in line, for the next 9 lines
						The second hex is for alterations to the letter, like Dakuten. 0x00 means no addition, 0x01 means Dakuten in JAP letter, but leads to graphic error with ENG letter.
			
0x997DC					Alphabets used for character naming. Has 3 Alphabets, Katakana, Hiragana, 
						Western, each with size 0xB4. In the Romhack, all have been replaced by the Western version, and switching between them has been hidden 
			
			

1.2. Memory Map AVATAR
===============================
To find out ROM location of specific resource, the ISO can be analysed with jpsxdec, and block nr of resource multiplied with 2048 (subtract offset of 397 blocks for AVATAR start). 

0x000000 - 0x00039C		At the very beginning, there is a pointer table to all resources 
						with 231 entries. The next pointer always has to be bigger than  the one before it, or crashes. 	
						
0x0A8000				Presumably the font table. Is loaded into VRAM and referenced by fonts, but could not be deciphered.
						
0x0B0000 - 0x0BA000		General game strings. These correspond to Blocks 1-10 from uw1_strings_clean.txt, and add another Block 11 specific for PSX version. 
						Block 24 is missing. Block 10 is existing, but seems to be unused in actual game (always shows "You see nothing special").
						Block 10 was left out in ROMhack to save space. Pointer table structure as follows:
						0x0B0000: Main pointer table, one 4-Byte entry per block (11 or 0x0B entries):
						starts with number of entries 0x0B, then gives block index followed by block pointer offset (base 0x0B0000)
						following a pointer leads to string pointer table for that block, e.g. 0x5C for block 1 leads to 
						0x0B005C: At that location is the size of pointer table 0x200 (512, same for all 11 blocks), followed by 512 2-Byte pointers and then the strings.
						Not every index has a string, it might be filled with empty strings (0x1F denotes end of string). 
						
0x318800				AVATAR[7].tim image to be translated, Length 104E
0x32E800				AVATAR[9].tim image to be translated, Length 10220
0x33F000				AVATAR[10].tim image to be translated, Length 10220
0x358800				AVATAR[12].tim image to be translated, Length 18220

0x3A2000 - 0x46E800		NPC structs with some status data and dialog strings for each NPC (uw1_strings_clean.txt Block 3585-Block 3898).
						0x3A2000: Main pointer table, one 4-Byte entry per NPC, starting with nr of NPCs (0x5C or 92), followed by pointer offsets to NPC structs (base 0x3A2000).
						e.g. first NPC:
						0x3A2800: start of first NPC struct. First Byte (0x1538) is relative offset to string pointer table:
						0x3A3D38: start of first NPC 2-Byte string pointer table. Starts with nr of strings (e.g. 0x30, varying for each NPC), followed by that many pointers, and then strings.
						strings are terminated by 0x1F, just like general strings.
						Directly before the string pointer table it seems to contain the dialog structure pointer table. There has been some work done to analyse it, but to no success.
						Decided to keep original dialog structure and only replace strings. Dialog structure differs from ENG version sometimes, so ENG strings have to be reordered or adapted.

2. ROM Extension
==========================
Multiple methods for ROM extension have been tried with varying success, including adapting main resource pointer table at 0x000000. 
Inserting empty ROM space around the 0x0BA000 mark for general strings didn´t work, led to crash in fight mode (weapon texture not found maybe?). 
Inseting 0x100000 bytes at 0x46E800 for NPCs seems to work so far, still needs long-term test after finishing all NPCs.
In the C software (in utilities.h), there is a function rewriteAvatarTopResourcePointerTable() to adapt main pointer table after insertion.


3. String processing
==========================
All strings are derived from the modified uw1_strings_clean.txt from Hank Morgans Underworld Exporter (Thanks!!).
Compared to the original, all empty spaces have been replaced to conserve ROM space.
With the custom C software UU_strings_to_atlas.exe they are preprocessed, written into an Atlas input file, invoking Atlas to convert them to a bin, then insert them into the ROM, adapting pointer tables.
Strings are manually edited directly in uw1_strings_clean.txt if corrections are needed (Player replies size, NPC dialog structure...), before converting them again with the toolchain mentioned above.
In the C software there has been added a function for linebreaks for longer strings (NPCs, Readables, Signs), as the ENG strings behave totally different than the JAP ones.

Strings sometimes contain variables or function calls. These are the same in ENG and JAP version.
Variables are in the format @XXX and are either substituted with a string of a given line (e.g. @SS1) or player name (e.g. @GS8).
Function calls are denoted with an escape backslash and a letter, e.g. \MX to add a mantra to the player´s knowledge, or \S0 to add a spell.



3.1. 	General strings
==========================
Block 11 has been extracted from AVATAR, translated, and added to uw1_strings_clean.txt source file.
Several methods are used to preprocess the strings, before converting them to Atlas format:
- index: drop index numbering from string line e.g. 001=
- compression: if consecutive strings are the same, they are only stored in ROM once, and then all pointers point to that one string
- articles: a_ and an_ have been stripped from object descriptions, because gramatically it doesn´t fit all cases how the JAP version uses them and it conserves ROM space
- plurals: dropped plurals from item description, as it´s unclear how JAP version uses them and it conserves ROM space
- numbers: number words liek "first, second, twentieth, hundreth..." are replaced by the digits 1,2,20,100 in order to conserve ROM space


3.2. NPC Strings
==========================
All NPCs have been manually adapted to fit to JAP version:
- JAP version has been extracted, displayed onscreen in a Debug NPC slot (Shak on Lvl 2, for he has the biggest struct size, NPC Block 3586) and checked with Google Translate for dialog structure
- added missing strings or removed exceeding strings from ENG version
- check that the 5 lines for player character replies are holding all the replies at each time. these are limited in size and do not scroll, so the PC replies had to be edited to fit
- either edit the NPC dialog lines to fit into given ROM space or expand ROM space (not sure yet)
- check links with @ in text, e.g. @SS1 or @GS8. Not all are used in JAP version, so removed the ones that aren´t (or chrashes)

Following NPC Blocks are not being used in JAP version (and possibly also ENG version): 
3595, 3609, 3699, 3770, 3879

Following NPC Blocks are the same:
3730, 3731, 3732, 3733
3846, 3847
3852, 3856
3860, 3862
3861, 3864
3875, 3881
